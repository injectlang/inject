package main

// TODO(rchapman): make this work with HCL

import (
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"os"
	"regexp"

	"github.com/rs/zerolog/log"
	//  "github.com/ryanchapman/config-container/sidecar"
	_ "github.com/ryanchapman/config-container/sidecar/log"
)

func usage() {
	fmt.Fprintf(os.Stderr, "usage: %s <key_name> <path_to_public_keyset_json>\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "Given a HPKE public keyset file (e.g. public_keyset.json), add to config.yml.tmpl\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "To use this program, you'll need a public/private keypair generated by Tink.\n")
	fmt.Fprintf(os.Stderr, "Install the program tinkey, then run:\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "tinkey create-keyset --key-template=DHKEM_X25519_HKDF_SHA256_HKDF_SHA256_AES_256_GCM --out private_keyset.json\n")
	fmt.Fprintf(os.Stderr, "tinkey create-public-keyset --in private_keyset.json --out public_keyset.json\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "For more info, see https://developers.google.com/tink/exchange-data\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "example:\n")
	fmt.Fprintf(os.Stderr, "%s DEV2022 public_keyset.json\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "would base64 encode the public keyset and add it to config.yml.tmpl:\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "_meta:\n")
	fmt.Fprintf(os.Stderr, "  public_keys:\n")
	fmt.Fprintf(os.Stderr, "    DEV2022: |\n")
	fmt.Fprintf(os.Stderr, "      eyJXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n")
	fmt.Fprintf(os.Stderr, "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n")
	fmt.Fprintf(os.Stderr, "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n")
	fmt.Fprintf(os.Stderr, "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX==\n")
	fmt.Fprintf(os.Stderr, "\n")
	os.Exit(1)
}

type ConfigFileMeta struct {
	PublicKeyDefs map[string]string `yaml:"public_keys"`
}

type ConfigFile struct {
	Meta         ConfigFileMeta         `yaml:"_meta"`
	Environments map[string]interface{} `yaml:"environments,inline"`
}

// given a public key in a file like public_keyset.json, base64 encode the contents of the file,
// so it can manually be added to _meta:public_keys in the ConfigFile
// e.g.
// _meta:
//
//	public_keys:
//	  PROD2022: |
//	    BASE64ENCODINGOFPUBLICKEYSETJSON
func addPubkey(pubkeyName, pathToPublicKeysetJson string) {
	// pubkeyName must start with an uppercase letter
	re := regexp.MustCompile(`^[A-Z]`)
	if !re.MatchString(pubkeyName) {
		log.Fatal().Msgf("when adding a public key to config file, name of public key must start with an uppercase letter, got %s", pubkeyName)
	}

	// pubkeyName must be all uppercase letters and numbers
	re = regexp.MustCompile(`^[A-Z0-9]+`)
	if !re.MatchString(pubkeyName) {
		log.Fatal().Msgf("when adding a public key to config file, name of public key must be uppercase letters and numbers, got %s", pubkeyName)
	}

	// read in contents of file pathToPublicKeysetJson
	publicKeysetJson, err := ioutil.ReadFile(pathToPublicKeysetJson)
	if err != nil {
		log.Fatal().Msgf("could not read file %s: %+v", pathToPublicKeysetJson, err)
	}

	// base64 encode contents of file pathToPublicKeysetJson
	b64PublicJsonKeyset := base64.StdEncoding.EncodeToString(publicKeysetJson)

	fmt.Printf("Add this your config.yml.tmpl file:\n\n")
	fmt.Printf("_meta:\n")
	fmt.Printf("  public_keys:\n")
	fmt.Printf("    %s: |\n", pubkeyName)
	// write up to 64 characters of base64 encoded string to yaml key named pubkeyName
	for i, r := range b64PublicJsonKeyset {
		if i%64 == 0 && i != 0 {
			fmt.Printf("\n")
		}
		if i%64 == 0 {
			fmt.Printf("      ")
		}
		fmt.Printf("%c", r)
	}

}

func main() {
	if len(os.Args) != 3 {
		usage()
	}

	pubkeyName := os.Args[1]
	pathPublicKeysetJson := os.Args[2]

	addPubkey(pubkeyName, pathPublicKeysetJson)
}
