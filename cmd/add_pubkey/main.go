package main

import (
	"fmt"
	"os"

	"github.com/injectlang/injector/editfile"
	_ "github.com/injectlang/injector/log"
	"github.com/rs/zerolog/log"
)

func usage() {
	fmt.Fprintf(os.Stderr, "usage: %s <key_name> <path_to_public_keyset_json>\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "Given a HPKE public keyset file (e.g. public_keyset.json), add to config.inj.hcl\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "To use this program, you'll need the public key from a public/private keypair generated by Tink.\n")
	fmt.Fprintf(os.Stderr, "Install the program tinkey, then run:\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "tinkey create-keyset --key-template=DHKEM_X25519_HKDF_SHA256_HKDF_SHA256_AES_256_GCM --out private_keyset.json\n")
	fmt.Fprintf(os.Stderr, "tinkey create-public-keyset --in private_keyset.json --out public_keyset.json\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "For more info, see https://developers.google.com/tink/exchange-data\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "example:\n")
	fmt.Fprintf(os.Stderr, "%s PROD2022 public_keyset.json\n", os.Args[0])
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "would base64 encode the public keyset and add it to config.inj.hcl:\n")
	fmt.Fprintf(os.Stderr, "\n")
	fmt.Fprintf(os.Stderr, "public_key \"PROD2022\" {\n")
	fmt.Fprintf(os.Stderr, "    base64 = <<-EOT\n")
	fmt.Fprintf(os.Stderr, "      eyJXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n")
	fmt.Fprintf(os.Stderr, "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n")
	fmt.Fprintf(os.Stderr, "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n")
	fmt.Fprintf(os.Stderr, "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX==\n")
	fmt.Fprintf(os.Stderr, "    EOT\n")
	fmt.Fprintf(os.Stderr, "}\n")
	fmt.Fprintf(os.Stderr, "\n")
	os.Exit(1)
}

func main() {
	if len(os.Args) != 3 {
		usage()
	}

	pubkeyName := os.Args[1]
	pathPublicKeysetJson := os.Args[2]
	pathConfigINJ := "config.inj.hcl"
	if len(os.Args) == 4 {
		pathConfigINJ = os.Args[3]
	}

	pubJsonKeyset, err := os.ReadFile(pathPublicKeysetJson)
	if err != nil {
		log.Fatal().Msgf("cannot read public keyset file %s: %s", pathPublicKeysetJson, err)
	}
	e := editfile.NewEditConfigFile(pathConfigINJ)
	diags := e.AddPublicKey(pubkeyName, pubJsonKeyset, false)
	if diags.HasErrors() {
		log.Fatal().Msgf("%+v", diags)
	}
}
